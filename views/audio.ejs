<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <title>2 Way Audio</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
<%- include('partials/header') %>

<div class="container" id="audio-container">
    <h2>2 Way Audio</h2>
    <div class="btn-group" role="group" aria-label="Audio Controls">
        <button id="startAudio" class="btn btn-success">Start Audio</button>
        <button id="stopAudio" class="btn btn-danger">Stop Audio</button>
    </div>
    <div class="btn-group mt-3" role="group" aria-label="PTT Controls">
        <button id="ptt" class="btn btn-primary">Push To Talk</button>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/pcm-player.js"></script>
<script src="/js/MicCapture.js"></script>
<script src="/js/tone-utils.js"></script>
<script>
    const socket = io();
    let pcmPlayer;
    let seq = 0;

    document.getElementById('startAudio').addEventListener('click', () => {
        if (!pcmPlayer) {
            pcmPlayer = new PCMPlayer({ encoding: '16bitInt', channels: 1, sampleRate: 8000 });

            socket.on('audio', (data) => {
                console.log('Audio data received');
                const audioData = data.slice(32); // Just dropping the header for now
                pcmPlayer.feed(new Uint8Array(audioData));
            });

            console.log('Audio started');
        }
    });

    document.getElementById('stopAudio').addEventListener('click', () => {
        socket.off('audio');
        if (pcmPlayer) {
            pcmPlayer.destroy();
            pcmPlayer = null;
        }
        console.log('Audio stopped');
    });

    document.getElementById('ptt').addEventListener('mousedown', async () => {
        await setup();
        tpt_generate();

        micCapture.captureMicrophone(() => {
            console.log('Microphone captured');
        });
    });

    document.getElementById('ptt').addEventListener('mouseup', () => {
        micCapture.stopCapture();
        console.log('Recording stopped');
    });

    function constructUSRPPacket(cmd, packetType, ptt) {
        const audioDataLength = cmd.length;
        const headerLength = 32;
        const minPacketLength = 320;
        const packetLength = Math.max(audioDataLength + headerLength, minPacketLength);
        const usrpPacket = new ArrayBuffer(packetLength);
        const arr = new DataView(usrpPacket);

        arr.setUint8(0, 85);  // U
        arr.setUint8(1, 83);  // S
        arr.setUint8(2, 82);  // R
        arr.setUint8(3, 80);  // P
        arr.setUint32(4, seq, false);
        arr.setUint32(12, ptt ? 1 : 0);
        arr.setUint32(20, packetType << 24, false);

        for (let i = 0; i < cmd.length; i++) {
            arr.setUint8(32 + i, cmd[i]);
        }

        seq = (seq + 1) & 0xffff;
        return new Uint8Array(usrpPacket);
    }

    function onAudioFrameReady(buffer, rms) {
        console.log('Sending audio frame:', buffer);
        const usrpPacket = constructUSRPPacket(buffer, 0, true);
        socket.emit('audio', usrpPacket);
    }
</script>
<script src="/js/theme-toggle.js"></script>
</body>
</html>